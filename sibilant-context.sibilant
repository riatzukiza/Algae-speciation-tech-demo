
(def create-context ()
  (var context (vm.create-context))
  (set module 'filename (pipe (process.cwd) (concat "/exec")))
  (set context
       '*sibilant sibilant
       'module  module
       'require require
       'context context)
  (each-key key global (set context key (get global key)))
  context)

(var context (create-context))

(def plift (f)
  (print "lifting" f)
  (promised ((dots args)) (apply f [ (dots args) (=> (err data) (if err (reject err) (resolve data))) ])))

(var read-file (plift fs.read-file))


(generic eval-file (def-promised) (path *context name)
         (print "path" path)
         (pipe (read-file path "utf8")
               (.then (partially-apply-after eval-string name))))

(def-generic eval-string (sibilant-string name)
  (vm.run-in-context (get (sibilant sibilant-string) "js")  context name))

(def-generic eval-stream ())

(type Sibilant-context
      (property name "discordian")
      (property *context context)
      (property *sibilant sibilant)
      eval-string
      eval-file
      eval-stream
      )

(assign context.Sibilant-context Sibilant-context)

(print "bootstrapping complete, starting app.")
